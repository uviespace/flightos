menu "SPARC Configuration"

### Arch specific settings

choice 
	prompt "Select CPU type"
	default LEON3

config LEON2
	bool "LEON2"
	help
	 Configure for LEON2.

config LEON3
	bool "LEON3"
	help
	 Configure for LEON3.

config LEON4
	bool "LEON4"
	help
	 Configure for LEON4.


endchoice

menu "LEON3 Errata"
	depends on LEON3

config LEON3FT_ERRATUM_TN0009
	bool "GRLIB-TN-0009 workaround"
	default y
	help
	 Enable workaround for erratum GRLIB-TN-0009: 'LEON3FT Stale Cache Entry
	 After Store with Data Tag Parity Error'
	 If building for an FT cpu, say Y here.

config LEON3FT_ERRATUM_TN0018
	bool "GRLIB-TN-0018 workaround"
	default y
	help
	 Enable workaround for erratum GRLIB-TN-0018: 'LEON3FT RETT Restart
         Errata'
	 If building for an FT cpu, say Y here.

endmenu

config MMU
	bool "Enable SPARC Reference MMU support"
	depends on MM
	depends on CHUNK
	default n
	help
	 Use virtual memory mapping via the SPARC SRMMU. This enables
	 read-write-execute and super/normal user memory protection and more
	 efficient memory usage.
	 If you have an SRMMU on your target platform, say Y if you want to use
	 it.

config PAGE_OFFSET
	bool "Use an offset in physical/virtual page address conversion"
	depends on MMU
	default n
	help
	  Use an offset when computing the virtual and physical page
	  addresses. This can not work unless the kernel is bootstrapped.
	  If unsure, say N.

config CPU_CLOCK_FREQ
	int "Set the CPU clock frequency (Hz)"
	default 80000000
	help
	  At least LEON CPUs lack a feature to detect the system clock
	  frequency. If you set this incorrectly, your timing will be off.

config EXTRA_SPARC_PHYS_BANKS
	int "Number of extra physical memory banks"
	default 0
	range 0 31
	help
	 Set number of additional physical memory banks if the machine has more
	 than one.

config SPARC_CPU_REG_WINDOWS
	int "Number of implemented SPARC register windows"
	default 8
	range 1 32
	help
	 Set the number of register windows implemented in the CPU.

config SPARC_TEXT_START
	hex "Address of .text section"
	default 0x40000000
	help
	 Set the start address of the .text section. The address of the
	 built-in SRAM might be a good choice.

config SPARC_FP_START
	hex "Initial address of the frame pointer"
	default 0x40100000
	help
	 Set the initial frame pointer address. The start of the .text
	 section plus 1 MiB is usually a safe bet.

menu "Memory Management Settings"
	depends on MM
	depends on CHUNK

config SPARC_MM_BLOCK_ORDER_MAX
	int "Initial memory block order upper limit"
	depends on MM
	default 26
	range 6 32
	help
	  The upper limit order (i.e. 2^N bytes) of the largest trackable memory
	  block. If unsure, set this to the size order of your largest single
	  memory bank.
	  Allowed order range is 6 to 31.

config SPARC_MM_BLOCK_ORDER_MIN
	int "Initial memory block order lower limit"
	depends on MM
	default 12
	range 5 30
	help
	  The lower limit order (i.e. 2^N bytes) of the smallest trackable
	  memory block. If unsure, choose the page size of the platform.
	  Allowed order range is 5 to 30.

config SPARC_INIT_PAGE_MAP_MAX_ENTRIES
	int "Maximum number of mappings in initial page map"
	depends on MM
	default 8
	range EXTRA_SPARC_PHYS_BANKS 32
	help
	  Configures the storage space for the initial page map. It's wise to
	  say at least EXTRA_SPARC_PHYS_BANKS here.

config SPARC_BOOTMEM_RESERVE_CHUNK_ORDER
	int "Memory block order to reserve for boot memory allocator"
	depends on MM
	depends on CHUNK
	default 20
	range  12 SPARC_MM_BLOCK_ORDER_MAX
	help
	  The order (i.e. 2^N bytes) of memory to reserve for the boot memory
	  allocator in a single request to the higher-tier memory manager.
	  The boot memory allocator is used by low level functionality, such as
	  the mangement of MMU translation tables, so choose a large enough
	  number. The default (20, i.e. 1 MiB) is a good starting point.
	  Allowed order range is 12 (SPARC page size) to
	  SPARC_MM_BLOCK_ORDER_MAX.

config SPARC_BOOTMEM_REQUEST_NEW_ON_DEMAND
	bool "Allow the boot memory allocator to request new memory blocks"
	depends on MM
	depends on CHUNK
	default y
	help
	 Allow the boot memory allocator to request new blocks of size
	 SPARC_BOOTMEM_RESERVE_CHUNK_ORDER from the higher-tier memory manager.
	 Beware that this will potentially lead to greater memory fragmentation.
	 If unsure, say Y.
endmenu

config SPARC_NESTED_IRQ
	bool "Allow nested IRQs"
	default y
	help
	 Allow higher-priority interrupts to preempt interrupt service routines
	 of lower priority interrupts. If unsure, say Y.


endmenu


# other

source "init/Kconfig"

source "kernel/Kconfig"

source "lib/Kconfig"

